<?xml version="1.0" encoding="UTF-8"?>
<!--
 Copyright 2023

 SPDX-License-Identifier: BSD-2-Clause
-->
<system>
    <!-- We allocate 512MiB of RAM for the guest. -->
    <memory_region name="guest_ram" size="0x10000000" page_size="0x200000" />
    <!-- We want to map in the UART to get input/output. -->
    <memory_region name="uart" size="0x10000" phys_addr="0x30860000" />
    <!-- To boot Linux, we need to map in the GIC virtual CPU interface. -->
    <memory_region name="gic_vcpu" size="0x1000" phys_addr="0x31020000" />

    <memory_region name="gpc" size="0x10000" phys_addr="0x303a0000" />
    <memory_region name="timer" size="0x20000" phys_addr="0x306a0000" />
    <memory_region name="pinctrl" size="0x10000" phys_addr="0x30330000" />
    <memory_region name="gpio" size="0x50000" phys_addr="0x30200000" />
    <memory_region name="irqsteer" size="0x1000" phys_addr="0x32e2d000" />
    <memory_region name="syscon" size="0x10000" phys_addr="0x30360000" />
    <memory_region name="clock_controller" size="0x10000" phys_addr="0x30380000" />

    <protection_domain name="CLIENT_VMM-1" priority="254">
        <program_image path="client_vmm_1.elf" />
        <map mr="guest_ram" vaddr="0x40000000" perms="rw" setvar_vaddr="guest_ram_vaddr" />
        
        <map mr="rx_free_serial_vmm_1" vaddr="0x6_000_000" perms="rw" cached="true" setvar_vaddr="serial_rx_free" />
        <map mr="rx_active_serial_vmm_1" vaddr="0x6_200_000" perms="rw" cached="true" setvar_vaddr="serial_rx_active" />
        <map mr="tx_free_serial_vmm_1" vaddr="0x103_400_000" perms="rw" cached="true" setvar_vaddr="serial_tx_free" />
        <map mr="tx_active_serial_vmm_1" vaddr="0x103_600_000" perms="rw" cached="true" setvar_vaddr="serial_tx_active" />
        <!-- sDDF data region -->
        <map mr="tx_data_serial_vmm_1" vaddr="0x8_400_000" perms="rw" cached="true" setvar_vaddr="serial_tx_data" />
        <map mr="rx_data_serial_vmm_1" vaddr="0x8_600_000" perms="rw" cached="true" setvar_vaddr="serial_rx_data" />
        
        
        <virtual_machine name="linux" id="0">
            <map mr="guest_ram" vaddr="0x40000000" perms="rwx" />
            <!-- The guest needs to view what is actually the vCPU interface as the CPU interface. -->
            <map mr="gic_vcpu" vaddr="0x31000000" perms="rw" cached="false" />

            <map mr="syscon" vaddr="0x30360000" perms="rw" cached="false" />
            <map mr="clock_controller" vaddr="0x30380000" perms="rw" cached="false" />
            <map mr="gpc" vaddr="0x303a0000" perms="rw" cached="false" />
            <map mr="timer" vaddr="0x306a0000" perms="rw" cached="false" />
            <map mr="pinctrl" vaddr="0x30330000" perms="rw" cached="false" />
            <map mr="gpio" vaddr="0x30200000" perms="rw" cached="false" />
            <map mr="irqsteer" vaddr="0x32e2d000" perms="rw" cached="false" />
        </virtual_machine>
        <!-- UART IRQ -->
        <!-- <irq irq="58" id="11" /> -->
    </protection_domain>

    <memory_region name="tx_data_driver" size="0x200_000" page_size="0x200_000" />
    <memory_region name="rx_data_driver" size="0x200_000" page_size="0x200_000" />
    <memory_region name="tx_data_serial_vmm_1" size="0x200_000" page_size="0x200_000" />
    <memory_region name="rx_data_serial_vmm_1" size="0x200_000" page_size="0x200_000" />
    <memory_region name="tx_data_serial_vmm_2" size="0x200_000" page_size="0x200_000" />
    <memory_region name="rx_data_serial_vmm_2" size="0x200_000" page_size="0x200_000" />
    <memory_region name="tx_data_serial_vmm_3" size="0x200_000" page_size="0x200_000" />
    <memory_region name="rx_data_serial_vmm_3" size="0x200_000" page_size="0x200_000" />
    <!-- Regions for the shared queues used by the driver and virtualiser -->
    <memory_region name="rx_free_serial_driver" size="0x200_000" page_size="0x200_000"/>
    <memory_region name="rx_active_serial_driver" size="0x200_000" page_size="0x200_000"/>
    <memory_region name="tx_free_serial_driver" size="0x200_000" page_size="0x200_000"/>
    <memory_region name="tx_active_serial_driver" size="0x200_000" page_size="0x200_000"/>
    <!--
        Regions for the shared queues used by the virtualiser and the
        client (in this case the client is the VMM)
    -->
    <memory_region name="tx_free_serial_vmm_1" size="0x200_000" page_size="0x200_000"/>
    <memory_region name="tx_active_serial_vmm_1" size="0x200_000" page_size="0x200_000"/>
    <memory_region name="rx_free_serial_vmm_1" size="0x200_000" page_size="0x200_000"/>
    <memory_region name="rx_active_serial_vmm_1" size="0x200_000" page_size="0x200_000"/>

    <memory_region name="tx_free_serial_vmm_2" size="0x200_000" page_size="0x200_000"/>
    <memory_region name="tx_active_serial_vmm_2" size="0x200_000" page_size="0x200_000"/>
    <memory_region name="rx_free_serial_vmm_2" size="0x200_000" page_size="0x200_000"/>
    <memory_region name="rx_active_serial_vmm_2" size="0x200_000" page_size="0x200_000"/>

    <memory_region name="tx_free_serial_vmm_3" size="0x200_000" page_size="0x200_000"/>
    <memory_region name="tx_active_serial_vmm_3" size="0x200_000" page_size="0x200_000"/>
    <memory_region name="rx_free_serial_vmm_3" size="0x200_000" page_size="0x200_000"/>
    <memory_region name="rx_active_serial_vmm_3" size="0x200_000" page_size="0x200_000"/>

     <!-- Virtualiser for transmit (TX) serial data -->
    <protection_domain name="serial_virt_tx" priority="100" pp="true">
        <program_image path="serial_virt_tx.elf" />
         <!-- shared memory for driver/virt queues -->
        <map mr="tx_free_serial_driver" vaddr="0x4_400_000" perms="rw" cached="true" setvar_vaddr="tx_free_driver" />
        <map mr="tx_active_serial_driver" vaddr="0x4_600_000" perms="rw" cached="true" setvar_vaddr="tx_active_driver" />
        <!-- shared memory for virt/client queues -->
        <!-- Queues between the virtualiser and VMM client  -->
        <map mr="tx_free_serial_vmm_1" vaddr="0x103_400_000" perms="rw" cached="true" setvar_vaddr="tx_free_client" />
        <map mr="tx_active_serial_vmm_1" vaddr="0x103_600_000" perms="rw" cached="true" setvar_vaddr="tx_active_client" />
        <map mr="tx_free_serial_vmm_2" vaddr="0x5_200_000" perms="rw" cached="true" setvar_vaddr="tx_free_client2" />
        <map mr="tx_active_serial_vmm_2" vaddr="0x5_400_000" perms="rw" cached="true" setvar_vaddr="tx_active_client2" />
        <map mr="tx_free_serial_vmm_3" vaddr="0x5_600_000" perms="rw" cached="true" setvar_vaddr="tx_free_client3" />
        <map mr="tx_active_serial_vmm_3" vaddr="0x5_800_000" perms="rw" cached="true" setvar_vaddr="tx_active_client3" />
        <!-- Data regions between virtualiser/driver and vmm/virtualiser -->
        <map mr="tx_data_driver" vaddr="0x2_200_000" perms="rw" cached="true" setvar_vaddr="tx_data_driver" />
        <!-- @ivanv: the virtual address of the data region needs to match what it is in the client as well,
             this is very fragile and should be fixed. -->
        <map mr="tx_data_serial_vmm_1" vaddr="0x8_400_000" perms="rw" cached="true" setvar_vaddr="tx_data_client" />
        <map mr="tx_data_serial_vmm_2" vaddr="0x8_800_000" perms="rw" cached="true" setvar_vaddr="tx_data_client2" />
        <map mr="tx_data_serial_vmm_3" vaddr="0x8_c00_000" perms="rw" cached="true" setvar_vaddr="tx_data_client3" />
    </protection_domain>
    <!-- Virtualiser for receive (RX) serial data -->
    <protection_domain name="serial_virt_rx" priority="100" pp="true">
        <program_image path="serial_virt_rx.elf" />
         <!-- shared memory for driver/virt queues -->
        <map mr="rx_free_serial_driver" vaddr="0x4_000_000" perms="rw" cached="true" setvar_vaddr="rx_free_driver" />
        <map mr="rx_active_serial_driver" vaddr="0x4_200_000" perms="rw" cached="true" setvar_vaddr="rx_active_driver" />
        <!-- Queues between the virtualiser and VMM client  -->
        <map mr="rx_free_serial_vmm_1" vaddr="0x4_800_000" perms="rw" cached="true" setvar_vaddr="rx_free_client" />
        <map mr="rx_active_serial_vmm_1" vaddr="0x5_000_000" perms="rw" cached="true" setvar_vaddr="rx_active_client" />
        <map mr="rx_free_serial_vmm_2" vaddr="0x5_200_000" perms="rw" cached="true" setvar_vaddr="rx_free_client2" />
        <map mr="rx_active_serial_vmm_2" vaddr="0x5_400_000" perms="rw" cached="true" setvar_vaddr="rx_active_client2" />
        <map mr="rx_free_serial_vmm_3" vaddr="0x5_600_000" perms="rw" cached="true" setvar_vaddr="rx_free_client3" />
        <map mr="rx_active_serial_vmm_3" vaddr="0x5_800_000" perms="rw" cached="true" setvar_vaddr="rx_active_client3" />

        <map mr="rx_data_driver" vaddr="0x2_600_000" perms="rw" cached="true" setvar_vaddr="rx_data_driver" />
        <map mr="rx_data_serial_vmm_1" vaddr="0x8_600_000" perms="rw" cached="true" setvar_vaddr="rx_data_client" />
        <map mr="rx_data_serial_vmm_2" vaddr="0x8_a00_000" perms="rw" cached="true" setvar_vaddr="rx_data_client2" />
        <map mr="rx_data_serial_vmm_3" vaddr="0x8_e00_000" perms="rw" cached="true" setvar_vaddr="rx_data_client3" />
    </protection_domain>

    <!-- The driver for talking to the hardware serial device, in this case UART -->
    <protection_domain name="uart_driver" priority="100" pp="true">
        <program_image path="uart_driver.elf" />
        <map mr="uart" vaddr="0x5_000_000" perms="rw" cached="false" setvar_vaddr="uart_base" />
        <!-- Data region -->
        <map mr="tx_data_driver" vaddr="0x2_200_000" perms="rw" cached="true" />
        <map mr="rx_data_driver" vaddr="0x2_600_000" perms="rw" cached="true" />
        <!-- shared memory for queues -->
        <map mr="rx_free_serial_driver" vaddr="0x4_000_000" perms="rw" cached="true" setvar_vaddr="rx_free" />
        <map mr="rx_active_serial_driver" vaddr="0x4_200_000" perms="rw" cached="true" setvar_vaddr="rx_active" />
        <map mr="tx_free_serial_driver" vaddr="0x4_400_000" perms="rw" cached="true" setvar_vaddr="tx_free" />
        <map mr="tx_active_serial_driver" vaddr="0x4_600_000" perms="rw" cached="true" setvar_vaddr="tx_active" />
        <!-- UART IRQ -->
        <irq irq="58" id="1" trigger="edge" />
    </protection_domain>


    <channel>
        <end pd="CLIENT_VMM-1" id="1"/>
        <end pd="serial_virt_tx" id="1"/>
    </channel>

    <!-- <channel>
        <end pd="CLIENT_VMM-2" id="1"/>
        <end pd="serial_virt_tx" id="2"/>
    </channel> -->

    <channel>
        <end pd="uart_driver" id="8"/>
        <end pd="serial_virt_tx" id="9"/>
    </channel>

    <channel>
        <end pd="CLIENT_VMM-1" id="2"/>
        <end pd="serial_virt_rx" id="1"/>
    </channel>

    <!-- <channel>
        <end pd="CLIENT_VMM-2" id="2"/>
        <end pd="serial_virt_rx" id="2"/>
    </channel> -->

    <channel>
        <end pd="uart_driver" id="10"/>
        <end pd="serial_virt_rx" id="11"/>
    </channel>


</system>
